{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#install","title":"Install","text":"<p>Download SmoothMQ from GitHub </p> <pre><code>$ git clone https://github.com/poundifdef/smoothmq.git\n</code></pre>"},{"location":"#run","title":"Run","text":"<p>To run the server, run:</p> <pre><code>$ go run . server\n</code></pre> <p>This will run the SmoothMQ server. The default SQS credentials are <code>DEV_ACCESS_KEY_ID</code> / <code>DEV_SECRET_ACCESS_KEY</code></p>"},{"location":"#dashboard","title":"Dashboard","text":"<p>The dashboard is available at http://localhost:3000</p>"},{"location":"#sqs","title":"SQS","text":"<p>The SQS API endpoint is http://localhost:3001</p> <p>You can connect to it using any SQS-compatible library. Here's an example for how to connect using Python:</p> <pre><code>import boto3\n\nsqs = boto3.client(\"sqs\", endpoint_url=\"http://localhost:3001\")\n</code></pre>"},{"location":"#metrics","title":"Metrics","text":"<p>Prometheus metrics are available at http://localhost:2112/metrics</p>"},{"location":"configuration/","title":"Configuration","text":"<p>SmoothMQ is highly configurable. Most configurations can be set via a command-line flag and environment variable.</p>"},{"location":"configuration/#server","title":"Server","text":"<pre><code>Usage: smoothmq server [flags]\n\nRun queue server\n\nFlags:\n  -h, --help                             Show context-sensitive help.\n      --config=CONFIG-FLAG               Configuration file\n      --log-pretty                       ($LOG_PRETTY)\n      --log-level=\"info\"                 Log level ($LOG_LEVEL)\n\n      --sqs-enabled                      Enable SQS protocol for queue ($Q_SQS_ENABLED)\n      --sqs-port=3001                    HTTP port for SQS protocol ($Q_SQS_PORT)\n      --sqs-keys=DEV_ACCESS_KEY_ID:DEV_SECRET_ACCESS_KEY,...\n                                         ($Q_SQS_KEYS)\n      --sqs-parse-celery                 Parse Celery messages. Lets you search by celery message ID and task\n                                         type ($Q_SQS_PARSE_CELERY).\n      --sqs-max-request-size=1048576     Max size of SQS request in bytes ($Q_SQS_MAX_REQUEST_SIZE)\n      --dashboard-enabled                Enable web dashboard ($Q_DASHBOARD_ENABLED)\n      --dashboard-port=3000              HTTP port for dashboard ($Q_DASHBOARD_PORT)\n      --dashboard-dev                    Run dashboard in dev mode, refresh templates from local\n                                         ($Q_DASHBOARD_DEV)\n      --dashboard-user=\"\"                Username for auth ($Q_DASHBOARD_USER)\n      --dashboard-pass=\"\"                Pass for auth ($Q_DASHBOARD_PASS)\n      --sqlite-path=\"smoothmq.sqlite\"    Path of SQLite file ($Q_SQLITE_PATH)\n      --metrics-prometheus-enabled       ($Q_METRICS_PROMETHEUS_ENABLED)\n      --metrics-prometheus-port=2112     ($Q_METRICS_PROMETHEUS_PORT)\n      --metrics-prometheus-path=\"/metrics\"\n                                         ($Q_METRICS_PROMETHEUS_PATH)\n      --use-single-port                  Enables having all HTTP services run on a single port with different\n                                         endpoints ($Q_SERVER_USE_SINGLE_PORT)\n      --port=8080                        If use-single-port is enabled, this is the port number for the server\n                                         ($PORT)\n</code></pre>"},{"location":"deploy/","title":"Deploy","text":"<p>SmoothMQ deploys as a single binary. Here are configurations for common cases.</p> <p>It is important that only 1 machine is provisioned. Everything else  (volume size, server size) can be tweaked.</p>"},{"location":"deploy/#flyio","title":"Fly.io","text":"<p>Copy the following and run <code>fly launch</code></p> fly.toml<pre><code>[build]\n\n[env]\n  Q_SQLITE_PATH = '/data/smoothmq.sqlite'\n\n[[mounts]]\n  source = 'smoothmq_data'\n  destination = '/data'\n  initial_size = '1gb'\n  processes = ['app']\n\n[http_service]\n  internal_port = 3000\n  force_https = true\n  auto_stop_machines = 'stop'\n  auto_start_machines = true\n  min_machines_running = 0\n  processes = ['app']\n\n[[services]]\n  protocol = 'tcp'\n  internal_port = 3001\n\n  [[services.ports]]\n    port = 3001\n    handlers = ['tls']\n\n[[services]]\n  protocol = 'tcp'\n  internal_port = 2112\n\n  [[services.ports]]\n    port = 2112\n    handlers = ['tls']\n\n[[vm]]\n  size = 'shared-cpu-1x'\n\n[[metrics]]\n  port = 2112\n  path = '/metrics'\n</code></pre>"},{"location":"deploy/#koyebcom","title":"Koyeb.com","text":"<p>Koyeb supports \"one-click\" deploys from git repositories. The following URL will kick off a deployment:</p> <pre><code>https://app.koyeb.com/deploy?name=smoothmq&amp;type=git&amp;builder=dockerfile&amp;repository=github.com/poundifdef/smoothmq&amp;branch=main&amp;ports=8080;http;/&amp;env[Q_SERVER_USE_SINGLE_PORT]=true\n</code></pre>"},{"location":"deploy/#railwayapp","title":"Railway.app","text":"<p>There is a Railway template to automatically deploy: https://railway.app/template/AJv-64</p>"},{"location":"deploy/#rendercom","title":"Render.com","text":"<p>Here is a Render blueprint:</p> render.yaml<pre><code>services:\n  - type: web\n    runtime: docker\n    name: smoothmq\n    repo: https://github.com/poundifdef/smoothmq.git\n    healthCheckPath: /\n    envVars:\n      - key: PORT\n        value: 8080\n      - key: Q_SERVER_USE_SINGLE_PORT\n        value: true\n      - key: Q_SQLITE_PATH\n        value: '/data/smoothmq.sqlite'\n    disk:\n      name: smoothmq-data\n      mountPath: /data\n      sizeGB: 1\n</code></pre>"},{"location":"SDK/cli/","title":"AWS CLI","text":"<p>Make sure you have the <code>AWS_ACCESS_KEY</code> and <code>AWS_SECRET_ACCESS_KEY</code> env vars set.</p> <p>From there, add the <code>--endpoint-url</code> to any CLI command. For example,  to list queues, run:</p> <pre><code>$ aws sqs list-queues --endpoint-url http://localhost:3001\n</code></pre>"},{"location":"SDK/go/","title":"Go","text":"<pre><code>package main\n\nimport (\n    \"context\"\n\n    \"github.com/aws/aws-sdk-go-v2/aws\"\n    \"github.com/aws/aws-sdk-go-v2/config\"\n    \"github.com/aws/aws-sdk-go-v2/service/sqs\"\n)\n\nfunc main() {\n    cfg, err := config.LoadDefaultConfig(context.TODO())\n    sqsClient := sqs.NewFromConfig(cfg, func(o *sqs.Options) {\n        o.BaseEndpoint = aws.String(\"http://localhost:3001\")\n    })\n}\n</code></pre>"},{"location":"SDK/python/","title":"Python","text":""},{"location":"SDK/python/#boto3","title":"Boto3","text":"<pre><code>import boto3\n\nsqs = boto3.client(\"sqs\", endpoint_url=\"http://localhost:3001\")\n</code></pre>"},{"location":"SDK/python/#celery","title":"Celery","text":"<p>SmoothMQ has special support for Celery.</p> <p>Note</p> <p>The endpoint_url must be <code>/</code>. You cannot run the SQS endpoint on a different path (such as <code>localhost:3001/sqs</code>).</p> <pre><code>from celery import Celery\n\napp = Celery(\n    \"tasks\",\n    broker_url=\"sqs://DEV_ACCESS_KEY_ID:DEV_SECRET_ACCESS_KEY@localhost:3001\",\n)\n</code></pre>"},{"location":"SDK/python/#schedule-tasks","title":"Schedule Tasks","text":"<p>To schedule a task in the future, add the <code>DelaySeconds</code> parameter:</p> <pre><code>@app.task\ndef hello():\n    print('hello world')\n\n# Schedules the task for 1 hour from now\nhello.apply_async(DelaySeconds=3600)\n</code></pre>"},{"location":"SDK/python/#monitor-specific-tasks","title":"Monitor Specific Tasks","text":"<p>If SmoothMQ detects a Celery task, it will extract the Celery task ID and task type as metadata. This means you can search for a specific ID or task type.</p> <p>Note</p> <p>Celery transmits the message as base64-encoded JSON</p> <p></p>"}]}